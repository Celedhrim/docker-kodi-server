commit 7434923cdc4f29e44bd26f93a8034d370b02b95b
Author: Celedhrim <celed+gitlab@ielf.org>
Date:   Mon Jun 25 16:05:27 2018 +0200

    Headless patch

diff --git a/xbmc/AppParamParser.cpp b/xbmc/AppParamParser.cpp
index 3729d39..7f35b0f 100644
--- a/xbmc/AppParamParser.cpp
+++ b/xbmc/AppParamParser.cpp
@@ -100,6 +100,8 @@ void CAppParamParser::ParseArg(const std::string &arg)
     m_testmode = true;
   else if (arg.substr(0, 11) == "--settings=")
     g_advancedSettings.AddSettingsFile(arg.substr(11));
+  else if (arg == "--headless")
+    g_application.SetHeadless(true);
   else if (arg.length() != 0 && arg[0] != '-')
   {
     if (m_testmode)
diff --git a/xbmc/Application.cpp b/xbmc/Application.cpp
index 0f281bd..9766c1b 100644
--- a/xbmc/Application.cpp
+++ b/xbmc/Application.cpp
@@ -258,6 +258,7 @@ CApplication::CApplication(void)
   , m_lastRenderTime(0)
   , m_skipGuiRender(false)
   , m_bStandalone(false)
+  , m_headless(false)
   , m_bTestMode(false)
   , m_bSystemScreenSaverEnable(false)
   , m_muted(false)
@@ -693,7 +694,8 @@ bool CApplication::CreateGUI()
   m_pGUI->Init();
 
   // Splash requires gui component!!
-  CServiceBroker::GetRenderSystem()->ShowSplash("");
+  if (!IsHeadless())
+    CServiceBroker::GetRenderSystem()->ShowSplash("");
 
   // The key mappings may already have been loaded by a peripheral
   CLog::Log(LOGINFO, "load keymapping");
@@ -1034,7 +1036,7 @@ bool CApplication::Initialize()
   int iDots = 1;
   while (!event.WaitMSec(1000))
   {
-    if (databaseManager.IsUpgrading())
+    if (databaseManager.IsUpgrading()  && !IsHeadless())
       CServiceBroker::GetRenderSystem()->ShowSplash(std::string(iDots, ' ') + localizedStr + std::string(iDots, '.'));
 
     if (iDots == 3)
@@ -1042,7 +1044,8 @@ bool CApplication::Initialize()
     else
       ++iDots;
   }
-  CServiceBroker::GetRenderSystem()->ShowSplash("");
+  if (!IsHeadless())
+    CServiceBroker::GetRenderSystem()->ShowSplash("");
 
   StartServices();
 
@@ -1073,14 +1076,15 @@ bool CApplication::Initialize()
     iDots = 1;
     while (!event.WaitMSec(1000))
     {
-      if (isMigratingAddons)
+      if (isMigratingAddons && !IsHeadless())
         CServiceBroker::GetRenderSystem()->ShowSplash(std::string(iDots, ' ') + localizedStr + std::string(iDots, '.'));
       if (iDots == 3)
         iDots = 1;
       else
         ++iDots;
     }
-    CServiceBroker::GetRenderSystem()->ShowSplash("");
+    if (!IsHeadless())
+      CServiceBroker::GetRenderSystem()->ShowSplash("");
     m_incompatibleAddons = incompatibleAddons;
     m_confirmSkinChange = true;
 
@@ -1422,7 +1426,7 @@ bool CApplication::OnSettingsSaving() const
   // don't save settings when we're busy stopping the application
   // a lot of screens try to save settings on deinit and deinit is
   // called for every screen when the application is stopping
-  if (m_bStop)
+  if (m_bStop || IsHeadless())
     return false;
 
   return true;
@@ -2454,7 +2458,7 @@ void CApplication::OnApplicationMessage(ThreadMessage* pMsg)
     CWIN32Util::XBMCShellExecute(pMsg->strParam.c_str(), (pMsg->param1 == 1));
 #endif
     // Resume AE processing of XBMC native audio
-    if (audioengine)
+    if (!IsHeadless() && audioengine)
     {
       if (!audioengine->Resume())
       {
@@ -2729,10 +2733,12 @@ bool CApplication::Cleanup()
     m_globalScreensaverInhibitor.Release();
     m_screensaverInhibitor.Release();
 
-    CServiceBroker::GetRenderSystem()->DestroyRenderSystem();
-    CServiceBroker::GetWinSystem()->DestroyWindow();
-    CServiceBroker::GetWinSystem()->DestroyWindowSystem();
-    CServiceBroker::GetGUI()->GetWindowManager().DestroyWindows();
+    if (!IsHeadless()) {
+      CServiceBroker::GetRenderSystem()->DestroyRenderSystem();
+      CServiceBroker::GetWinSystem()->DestroyWindow();
+      CServiceBroker::GetWinSystem()->DestroyWindowSystem();
+      CServiceBroker::GetGUI()->GetWindowManager().DestroyWindows();
+    }
 
     CLog::Log(LOGNOTICE, "unload sections");
 
@@ -3252,15 +3258,18 @@ void CApplication::PlaybackCleanup()
 
   if (!m_appPlayer.IsPlayingVideo())
   {
-    if(CServiceBroker::GetGUI()->GetWindowManager().GetActiveWindow() == WINDOW_FULLSCREEN_VIDEO ||
-       CServiceBroker::GetGUI()->GetWindowManager().GetActiveWindow() == WINDOW_FULLSCREEN_GAME)
+    if (!IsHeadless())
     {
-      CServiceBroker::GetGUI()->GetWindowManager().PreviousWindow();
-    }
-    else
-    {
-      //  resets to res_desktop or look&feel resolution (including refreshrate)
-      CServiceBroker::GetWinSystem()->GetGfxContext().SetFullScreenVideo(false);
+      if(CServiceBroker::GetGUI()->GetWindowManager().GetActiveWindow() == WINDOW_FULLSCREEN_VIDEO ||
+        CServiceBroker::GetGUI()->GetWindowManager().GetActiveWindow() == WINDOW_FULLSCREEN_GAME)
+      {
+        CServiceBroker::GetGUI()->GetWindowManager().PreviousWindow();
+      }
+      else
+      {
+        //  resets to res_desktop or look&feel resolution (including refreshrate)
+        CServiceBroker::GetWinSystem()->GetGfxContext().SetFullScreenVideo(false);
+      }
     }
 #ifdef TARGET_DARWIN_IOS
     CDarwinUtils::SetScheduling(false);
diff --git a/xbmc/Application.h b/xbmc/Application.h
index 57603ca..e113a9f 100644
--- a/xbmc/Application.h
+++ b/xbmc/Application.h
@@ -329,6 +329,16 @@ public:
     return m_bStandalone;
   }
 
+  void SetHeadless(bool value)
+  {
+    m_headless = value;
+  }
+
+  bool IsHeadless() const
+  {
+    return m_headless;
+  }
+
   void SetEnableTestMode(bool value)
   {
     m_bTestMode = value;
@@ -464,6 +474,7 @@ protected:
   bool m_skipGuiRender;
 
   bool m_bStandalone;
+  bool m_headless;
   bool m_bTestMode;
   bool m_bSystemScreenSaverEnable;
 
diff --git a/xbmc/guilib/GUIDialog.cpp b/xbmc/guilib/GUIDialog.cpp
index 7120659..68aec93 100644
--- a/xbmc/guilib/GUIDialog.cpp
+++ b/xbmc/guilib/GUIDialog.cpp
@@ -185,7 +185,7 @@ void CGUIDialog::Open_Internal(bool bProcessRenderLoop, const std::string &param
   CSingleLock lock(CServiceBroker::GetWinSystem()->GetGfxContext());
 
   if (!CServiceBroker::GetGUI()->GetWindowManager().Initialized() ||
-      (m_active && !m_closing && !IsAnimating(ANIM_TYPE_WINDOW_CLOSE)))
+      (m_active && !m_closing && !IsAnimating(ANIM_TYPE_WINDOW_CLOSE))|| g_application.IsHeadless())
     return;
 
   // set running before it's added to the window manager, else the auto-show code
diff --git a/xbmc/platform/xbmc.cpp b/xbmc/platform/xbmc.cpp
index 08b1072..12ac7cb 100644
--- a/xbmc/platform/xbmc.cpp
+++ b/xbmc/platform/xbmc.cpp
@@ -62,7 +62,7 @@ extern "C" int XBMC_Run(bool renderGUI, const CAppParamParser &params)
   CXBMCApp::get()->Initialize();
 #endif
 
-  if (renderGUI && !g_application.CreateGUI())
+  if (renderGUI && !g_application.IsHeadless() && !g_application.CreateGUI())
   {
     CMessagePrinter::DisplayError("ERROR: Unable to create GUI. Exiting");
     return status;
diff --git a/xbmc/settings/SettingConditions.cpp b/xbmc/settings/SettingConditions.cpp
index 9ff2437..d3b061a 100644
--- a/xbmc/settings/SettingConditions.cpp
+++ b/xbmc/settings/SettingConditions.cpp
@@ -355,6 +355,9 @@ void CSettingConditions::Initialize(const CProfilesManager &profileManager)
     m_simpleConditions.insert("isstandalone");
 #endif
 
+if (g_application.IsHeadless())
+  m_simpleConditions.insert("is_headless");
+
   m_simpleConditions.insert("has_ae_quality_levels");
 
 #ifdef HAS_WEB_SERVER
